AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: "This tample will create ECS with Applciation LoadBalancer based on ECS type user input. This supports FARGATE, EC2 and EC2 with Spot Instance EC2."
Parameters:
  LaunchType:
    Description:  EC2 or FARGATE  
    Type: String
    AllowedValues:
      - FARGATE
      - EC2
  InstanceType:
    Type: String
  ProjectName:
    Description: "Name of project"
    Type: String
    Default: ""
  ApplicationServiceKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.     
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.
  CodeBaseImageECRName:
    Description: "The name of S3 bucket"
    Type: String 
    Default: ""    
  MinClusterSize:
    Type: Number
    Default: 1
  MaxClusterSize:
    Type: Number
    Default: 1
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: ''
  ContainerName:
    Type: String
    Default: '' 
  PurchaseOption:
    Description: Sopt or OnDemand
    Type: String
    AllowedValues:
      - OnDemand
      - Spot  
  SpotBidPrice:
    Default: 0.50
    Description: Spot Instance bid price
    Type: String
        

Conditions:
  EC2LaunchType: !Equals [ !Ref LaunchType, "EC2" ]
  FargateLaunchType: !Equals [ !Ref LaunchType, "FARGATE" ]
  IsSpot: !Equals [ !Ref PurchaseOption, Spot ]


Mappings:
  AWSRegionToAMI:
    ap-south-1:
      AMI: ami-00491f6f
    eu-west-3:
      AMI: ami-9aef59e7
    eu-west-2:
      AMI: ami-67cbd003
    eu-west-1:
      AMI: ami-1d46df64
    ap-northeast-2:
      AMI: ami-c212b2ac
    ap-northeast-1:
      AMI: ami-872c4ae1
    sa-east-1:
      AMI: ami-af521fc3
    ca-central-1:
      AMI: ami-435bde27
    ap-southeast-1:
      AMI: ami-910d72ed
    ap-southeast-2:
      AMI: ami-58bb443a
    eu-central-1:
      AMI: ami-509a053f
    us-east-1:
      AMI: ami-02507631a9f7bc956
    us-east-2:
      AMI: ami-ce1c36ab
    us-west-1:
      AMI: ami-74262414
    us-west-2:
      AMI: ami-decc7fa6

Resources:      

  ECSRole:
    Condition: EC2LaunchType
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  InstanceProfile:
    Condition: EC2LaunchType
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIpv6: ::/0 
      VpcId: !Ref VpcId
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-albsg
  EC2InstanceSecurityGroup:
    DependsOn: ALBSecurityGroup
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 14.143.172.106/32
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      VpcId: !Ref VpcId
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-instancesg
          
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  AutoScalingGroup:
    Condition: EC2LaunchType
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
         - !Ref PrivateSubnet1
         - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinClusterSize
      MaxSize: !Ref MaxClusterSize
      DesiredCapacity: !Ref MinClusterSize
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECS
          PropagateAtLaunch: true


  LaunchConfiguration:
    Condition: EC2LaunchType
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource  LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref ApplicationServiceKeyName
      SpotPrice: !If [IsSpot,!Ref SpotBidPrice,!Ref "AWS::NoValue"]
      SecurityGroups:
        - !Ref EC2InstanceSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup


#Fot Task Defination
  #ECS TASK ROLE
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-task-Role
      Path: /
      AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                  "Action": "sts:AssumeRole"
              }]
          }
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-task-Policy
          PolicyDocument: 
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:Get*",
                            "s3:List*"
                        ],
                        "Resource": "*"
                }]
            }

#ECS SERVICE ROLE
  EcsServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-service-Role
      Path: /
      AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-service-Policy
          PolicyDocument: 
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                           "ec2:AttachNetworkInterface",
                           "ec2:CreateNetworkInterface",
                           "ec2:CreateNetworkInterfacePermission",
                           "ec2:DeleteNetworkInterface",
                           "ec2:DeleteNetworkInterfacePermission",
                           "ec2:Describe*",
                           "ec2:DetachNetworkInterface",
                           "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                           "elasticloadbalancing:DeregisterTargets",
                           "elasticloadbalancing:Describe*",
                           "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                           "elasticloadbalancing:RegisterTargets",
                           "route53:ChangeResourceRecordSets",
                           "route53:CreateHealthCheck",
                           "route53:DeleteHealthCheck",
                           "route53:Get*",
                           "route53:List*",
                           "route53:UpdateHealthCheck",
                           "servicediscovery:DeregisterInstance",
                           "servicediscovery:Get*",
                           "servicediscovery:List*",
                           "servicediscovery:RegisterInstance",
                           "servicediscovery:UpdateInstanceCustomHealthStatus"
                        ],
                        "Resource": "*"
                }]
            }
#Task Execution Role
  EcsTaskExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-TaskExecution-Role
      Path: /
      AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies: 
        - PolicyName: !Sub ${AWS::StackName}-TaskExecution-Policy
          PolicyDocument: 
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ecr:GetAuthorizationToken",
                            "ecr:BatchCheckLayerAvailability",
                            "ecr:GetDownloadUrlForLayer",
                            "ecr:BatchGetImage",
                            "logs:CreateLogStream",
                            "logs:DescribeLogStreams",
                            "logs:PutRetentionPolicy",
                            "logs:PutLogEvents"
                          ],
                         "Resource": "*"
                }]
            }

  #CloudWatch log group
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 90

  ECSService: 
    DependsOn: 
       - ECSTargetGroup
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref Cluster
      DesiredCount: 1
      TaskDefinition: !Ref Taskdefinition 
      LaunchType: !If [EC2LaunchType, EC2, FARGATE]
      LoadBalancers: 
        - ContainerName: !Ref ContainerName
          ContainerPort: 80
          TargetGroupArn: !Ref ECSTargetGroup  
      PlacementStrategies: 
        !If 
         - EC2LaunchType 
         -
           - 
             Field: attribute:ecs.availability-zone
             Type: spread 
         - !Ref AWS::NoValue             
            
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration: 
       !If 
        - EC2LaunchType
        - !Ref AWS::NoValue
        -
         AwsvpcConfiguration:
           AssignPublicIp: ENABLED
           SecurityGroups: 
              - !Ref EC2InstanceSecurityGroup
           Subnets: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2      

        
  Taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      NetworkMode: !If [EC2LaunchType, bridge, awsvpc]
      TaskRoleArn: !Ref EcsTaskRole
      ExecutionRoleArn: !Ref EcsTaskExecutionRole
      RequiresCompatibilities: 
        - !If [EC2LaunchType, EC2, FARGATE]
      Cpu: 256  
      Memory: 512
      ContainerDefinitions: 
        - 
          Name: !Ref ContainerName
          Image: !Join [ "", [ !Ref 'AWS::AccountId', ".dkr.ecr.us-east-1.amazonaws.com/", !Ref 'CodeBaseImageECRName', ":latest" ]]
          Cpu: "10"
          PortMappings: 
            - ContainerPort: 80
          Environment: 
            - 
              Name: environment_name
              Value: ECS
          LogConfiguration:
            LogDriver: awslogs
            Options: 
              awslogs-region: us-east-1
              awslogs-group:  !Ref AWS::StackName
              awslogs-stream-prefix: ecs
          Memory: "128"
          Essential: "true"

  #Ecs elb 
  EcsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join [ "-", [!Ref ProjectName, !Ref EnvironmentName, "LB" ] ]
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: !Join [ "-", [!Ref ProjectName, !Ref EnvironmentName, "LB" ] ]

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: EcsLoadBalancer
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5       
      Tags: 
        - Key: Project
          Value: !Ref ProjectName
        - Key: Name
          Value: !Ref ProjectName          
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 900
        - Key: deregistration_delay.timeout_seconds
          Value: 30          
      TargetType: !If [EC2LaunchType, instance, ip]     

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: EcsLoadBalancer
    Properties: 
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ECSTargetGroup
      LoadBalancerArn: !Ref EcsLoadBalancer
      Port: 80
      Protocol: HTTP

    